<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>漏洞修复 on Vampire blog</title>
    <link>https://vampire-lab.github.io/tags/%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/</link>
    <description>Recent content in 漏洞修复 on Vampire blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Mon, 04 Nov 2019 18:38:19 +0800</lastBuildDate>
    
	<atom:link href="https://vampire-lab.github.io/tags/%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>破壳漏洞利用与修复（shellshock CVE 2014 6271）</title>
      <link>https://vampire-lab.github.io/posts/%E7%A0%B4%E5%A3%B3%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E4%BF%AE%E5%A4%8Dshellshock-cve-2014-6271/</link>
      <pubDate>Mon, 04 Nov 2019 18:38:19 +0800</pubDate>
      
      <guid>https://vampire-lab.github.io/posts/%E7%A0%B4%E5%A3%B3%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E4%BF%AE%E5%A4%8Dshellshock-cve-2014-6271/</guid>
      <description>环境安装 由于工作环境中一台Redhat 5.5 服务器上存在破壳漏洞（CVE-2014-6271）漏洞，相关漏洞资料中只影响到bash 4.3版本，但是升级到bash 4.4版本漏洞还是可以利用成功。于是在本地安装一台Redhat 5.5 并配置Apache httpd cgi，在安装系统过程中选择支持web服务就可以在运行系统之后直接启用httpd服务。
安全好之后发现Redhat 5.5 的httpd 默认支持cgi功能，如果不支持可以自己手动更改/etc/httpd/conf/httpd.conf内容，如下
去掉 AddHandler cgi-script .cgi 前面的注释
部分教程提示还需要将如下内容去掉注释
然后将cgi脚本放入到/var/www/cgi-bin/目录下，保存为test-cgi文件，内容如下
#!/bin/sh  # disable filename globbing set -f echo &amp;#34;Content-type: text/plain; charset=iso-8859-1&amp;#34; echo echo CGI/1.0 test script report: echo echo argc is $#. argv is &amp;#34;$*&amp;#34;. echo echo SERVER_SOFTWARE = $SERVER_SOFTWARE echo SERVER_NAME = $SERVER_NAME echo GATEWAY_INTERFACE = $GATEWAY_INTERFACE echo SERVER_PROTOCOL = $SERVER_PROTOCOL echo SERVER_PORT = $SERVER_PORT echo REQUEST_METHOD = $REQUEST_METHOD echo HTTP_ACCEPT = &amp;#34;$HTTP_ACCEPT“ echo PATH_INFO = &amp;#34;$PATH_INFO&amp;#34; echo PATH_TRANSLATED = &amp;#34;$PATH_TRANSLATED&amp;#34; echo SCRIPT_NAME = &amp;#34;$SCRIPT_NAME&amp;#34; echo QUERY_STRING = &amp;#34;$QUERY_STRING&amp;#34; echo REMOTE_HOST = $REMOTE_HOSTecho REMOTE_ADDR = $REMOTE_ADDRecho REMOTE_USER = $REMOTE_USERecho AUTH_TYPE = $AUTH_TYPEecho CONTENT_TYPE = $CONTENT_TYPEecho CONTENT_LENGTH = $CONTENT_LENGTH千万记住上传的文件不要使用Windows换行符&amp;rdquo;/r/n&amp;rdquo;，会报错的。。。</description>
    </item>
    
    <item>
      <title>Openssl Heartbleed漏洞利用与修复</title>
      <link>https://vampire-lab.github.io/posts/openssl-heartbleed%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E4%BF%AE%E5%A4%8D/</link>
      <pubDate>Mon, 04 Nov 2019 18:10:31 +0800</pubDate>
      
      <guid>https://vampire-lab.github.io/posts/openssl-heartbleed%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E4%BF%AE%E5%A4%8D/</guid>
      <description>Heartbleed漏洞简介 Heartbleed漏洞是openssl的漏洞，这个漏洞（CVE-2014-0160）的产生是由于没有在memcpy()调用受害用户输入内容作为长度参数之前正确进行边界检查。攻击者可以追踪OpenSSL所分配的64KB缓存、将超出必要范围的字节信息复制到缓存当中再返回缓存中，这样一来受害者的内存内容就会以每次64K的速度进行泄露。
心跳功能介绍 正常情况下要使SSL发挥作用，需要与服务器进行通信，所以它会发送一个“heartbeat”（心跳）包，通过包内的特定信号，进行判断服务器是否存活，服务器就会向计算机返回该信号，让服务器确保安全通信。而且计算机和服务器之间会定期发送hearbeat以确定用户和服务器没有脱机。
漏洞原理 该漏洞主要问题出在heartbeat心跳检测的扩展中，在源码d1_both.c中，找到如下代码
#ifndef OPENSSL_NO_HEARTBEATS int dtls1_process_heartbeat(SSL *s) { unsigned char *p = &amp;amp;s-&amp;gt;s3-&amp;gt;rrec.data[0], *pl; unsigned short hbtype; unsigned int payload; unsigned int padding = 16; 指针p指向一条SSLv3结构体中的数据，结构体SSL3_RECORD的定义如下： 代码段1
typedef struct ssl3_record_st { int type; unsigned int length; unsigned int off; unsigned char *data; unsigned char *input; unsigned char *comp; unsigned long epoch; unsigned char seq_num[8]; } SSL3_RECORD; 其中type为心跳包的类型，length为数据长度，data为数据正文
代码段2
hbtype = *p++; n2s(p, payload); pl = p; 首先获取type的心跳包的类型，类型有两种TLS1_HB_REQUEST和TLS1_HB_RESPONSE，然后使用宏n2s从指针p指向的数组中取出前两个字节，并把它们存入变量payload中，最后将变量pl指向由访问者提供的心跳包数据。</description>
    </item>
    
  </channel>
</rss>